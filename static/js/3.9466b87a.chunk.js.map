{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileDataReduxForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","../node_modules/antd/es/comment/index.js","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","ProfileDataReduxForm","reduxForm","form","handleSubmit","error","profile","onSubmit","className","style","commonError","createField","Input","Textarea","Object","keys","contacts","map","c","ProfileInfo","isOwner","changePhoto","editProfileDataTC","changeProfileUpdateSuccessAC","profileUpdateSuccess","useSelector","state","profilePage","hiddenFileInput","useRef","Preloader","s","profileInfo","description","src","photos","large","UserAvatar","mainPhoto","onClick","event","current","click","type","files","photo","ref","visibility","initialValues","formData","changeEditMode","ProfileData","fullName","AboutMe","lookingForAJob","lookingForAJobDescription","Contacts","obj","key","__rest","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","Comment","_a","actions","author","avatar","children","content","customizePrefixCls","prefixCls","datetime","otherProps","_React$useContext","React","ConfigContext","getPrefixCls","direction","avatarDom","concat","alt","actionDom","action","index","authorContent","contentDom","cls","classNames","_defineProperty","_extends","nestedChildren","renderNested","Post","message","MyPosts","memo","console","log","postsElements","posts","id","likesCount","myPosts","MyPostReduxForm","values","addPost","newPostBody","maxLength","maxLengthCreator","Field","placeholder","name","component","validate","required","MyPostsContainer","connect","dispatch","AddPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getProfileTC","getStatusTC","refreshProfile","prevProps","prevState","updateStatusTC","changePhotoTC","Component","compose","auth","isAuth","isFetching","usersPage","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.9466b87a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__1FWdy\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1uFrv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1woWL\",\"post\":\"MyPosts_post__1V8Cz\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\n\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\n\n    const [editMode, setEditMode] = useState(false);\n    const [status, setStatus] = useState(\"\");\n\n    useEffect( () => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n    const deActivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    return (\n        <div>\n            { !editMode ?\n                <div>\n                    Status: <span onDoubleClick={activateEditMode}>{props.status || \"No status\"}</span>\n                </div>\n                :\n                <div>\n                    <input\n                        onChange={onChangeStatus}\n                        autoFocus={true}\n                        onBlur={deActivateEditMode}\n                        value={status}\n                    />\n                </div>\n            }\n        </div>\n    )\n}\n","import React from \"react\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {ProfileType} from \"../ProfileContainer\";\nimport {ProfileFormDataType} from \"./ProfileInfo\";\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\nimport {changeProfileUpdateSuccessAC} from \"../../../redux/profile-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {Button} from \"antd\";\n\ntype IProps = {\n    profile: ProfileType\n}\n\nconst ProfileFormData: React.FC<InjectedFormProps<ProfileType, IProps> & IProps> = ({handleSubmit, error, profile}) => {\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n\n                <div>\n                    {error && <div className={style.commonError}>{error}</div>}\n                </div>\n                <div>\n                    <b>Full name:</b> {createField(\"fullName\", \"Full name\", Input)}\n                </div>\n                <div>\n                    <b>About me:</b> {createField(\"aboutMe\", \"Some information about you\", Input)}\n                </div>\n                <div>\n                    <b>Looking for a job:</b> {createField(\"lookingForAJob\", null, Input, [], \"checkbox\")}\n                </div>\n                <div>\n                    <b>Looking for a\n                        job(Description):</b> {createField(\"lookingForAJobDescription\", \"Description about job\", Textarea)}\n                </div>\n                <div>\n                    Contacts:\n                    {Object.keys(profile.contacts).map((c) => {\n                        return (\n                            <div>\n                                <b>{c}: </b>{createField(`contacts.${c}`, `${c}`, Input)}\n                            </div>\n                        )\n                    })}\n                </div>\n                <div>\n                    <button>Save</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\n\nexport const ProfileDataReduxForm = reduxForm<ProfileType, IProps>({form: 'Edit profile'})(ProfileFormData)\n","import React, {ChangeEvent, useRef} from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {ProfileType} from \"../ProfileContainer\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\nimport UserAvatar from \"../../../assets/images/UserAvatar.jpeg\";\nimport {photoFileType} from \"../../../redux/profile-reducer\";\nimport {ProfileDataReduxForm} from \"./ProfileDataReduxForm\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AllAppStateType} from \"../../../redux/redux-store\";\nimport {Upload, message, Button, Input} from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\n\nimport \"antd/dist/antd.less\";\n\n\n\ntype ProfileInfoPropsType = {\n    profile?: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    changePhoto: (file: photoFileType) => void\n    editProfileDataTC: (formData: ProfileFormDataType) => void\n    changeProfileUpdateSuccessAC: (profileUpdateSuccess: boolean) => void\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({\n                                                                profile,\n                                                                status,\n                                                                updateStatus,\n                                                                isOwner,\n                                                                changePhoto,\n                                                                editProfileDataTC,\n                                                                changeProfileUpdateSuccessAC\n                                                            }) => {\n\n    const profileUpdateSuccess = useSelector<AllAppStateType, boolean>( state =>  state.profilePage.profileUpdateSuccess)\n\n    // Create a reference to the hidden file input element\n    const hiddenFileInput = useRef(null);\n    // Programatically click the hidden file input element\n    // when the Button component is clicked\n    const handleClick = (event: any) => {\n        // @ts-ignore\n        hiddenFileInput.current && hiddenFileInput.current.click();\n    };\n\n\n    const onSubmit = (formData: ProfileType) => {\n        editProfileDataTC(formData)\n    }\n\n    const changeEditMode = () => {\n       changeProfileUpdateSuccessAC(true)\n    }\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onPhotoChange = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget.files) {\n            const photo = e.currentTarget.files[0]\n            changePhoto(photo)\n        }\n    }\n\n\n\n\n    return (\n        <div className={s.profileInfo}>\n            <div className={s.description}>\n                <img src={profile.photos.large || UserAvatar} className={s.mainPhoto}/>\n                <div>\n                    {/*{isOwner && <input type={\"file\"} onChange={onPhotoChange}/>}*/}\n                    {isOwner &&\n                    <>\n                        <Button onClick={handleClick} type={\"primary\"}>\n                            Change photo\n                        </Button>\n                        <input type={\"file\"} onChange={onPhotoChange} ref={hiddenFileInput} style={{visibility: \"hidden\"}}/>\n                    </>\n                    }\n                </div>\n                <ProfileStatusWithHooks status={status}\n                                        updateStatus={updateStatus}\n                />\n                <div>\n                    {profileUpdateSuccess ? <ProfileDataReduxForm initialValues={profile} onSubmit={onSubmit} profile={profile}/> : <ProfileData profile={profile} status={status} updateStatus={updateStatus} isOwner={isOwner} changeEditMode={changeEditMode}/>}\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport type ProfileDataPropsType = {\n    profile?: ProfileType\n    updateStatus: (status: string) => void\n    status: string\n    isOwner: boolean\n    changeEditMode: () => void\n\n}\n\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, changeEditMode}) => {\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div>\n            <div>\n                Full name: {profile.fullName}\n            </div>\n            <div>\n                Обо мне:\n                {profile.AboutMe}\n            </div>\n            <div>\n                <div>\n                    looking for a job: {profile.lookingForAJob ? \"yes\" : \"not\"}\n                </div>\n                {profile.lookingForAJob &&\n                <div>My professional skills: {profile.lookingForAJobDescription}</div>\n                }\n            </div>\n            <Contacts contacts={profile.contacts}/>\n            <div>\n                {/*{isOwner && <button onClick={ changeEditMode }>Edit profile info</button>}*/}\n                {isOwner && <Button type=\"primary\" onClick={ changeEditMode }>Edit profile info</Button>}\n            </div>\n        </div>\n    )\n}\n\nexport type ProfileFormDataType = {\n    contacts: {[key:string]: string}\n    fullName: string\n    AboutMe: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    onSubmit: () => void\n}\n\nexport type ContactsPropsType = {\n    contacts: {[key:string]: string}\n}\n\nexport const Contacts: React.FC<ContactsPropsType> = ({contacts}) => {\n\n    if (!contacts) {\n        return <Preloader/>\n    }\n\n    const getKeyValue = <T extends object, U extends keyof T>(obj: T) => (key: U) => obj[key];\n\n    return (\n        <div>\n            Contacts:\n            {Object.keys(contacts).map( (c) => {\n                return (\n                    <div><b>{c}: </b>{getKeyValue(contacts)(c)}</div>\n                )\n            })}\n        </div>\n    )\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\n\nvar Comment = function Comment(_a) {\n  var actions = _a.actions,\n      author = _a.author,\n      avatar = _a.avatar,\n      children = _a.children,\n      className = _a.className,\n      content = _a.content,\n      customizePrefixCls = _a.prefixCls,\n      datetime = _a.datetime,\n      otherProps = __rest(_a, [\"actions\", \"author\", \"avatar\", \"children\", \"className\", \"content\", \"prefixCls\", \"datetime\"]);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var renderNested = function renderNested(prefixCls, nestedChildren) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(\"\".concat(prefixCls, \"-nested\"))\n    }, nestedChildren);\n  };\n\n  var prefixCls = getPrefixCls('comment', customizePrefixCls);\n  var avatarDom = avatar ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-avatar\")\n  }, typeof avatar === 'string' ? /*#__PURE__*/React.createElement(\"img\", {\n    src: avatar,\n    alt: \"comment-avatar\"\n  }) : avatar) : null;\n  var actionDom = actions && actions.length ? /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"\".concat(prefixCls, \"-actions\")\n  }, actions.map(function (action, index) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: \"action-\".concat(index)\n    }, action) // eslint-disable-line react/no-array-index-key\n    ;\n  })) : null;\n  var authorContent = (author || datetime) && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-content-author\")\n  }, author && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-author-name\")\n  }, author), datetime && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-author-time\")\n  }, datetime));\n  var contentDom = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-content\")\n  }, authorContent, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-content-detail\")\n  }, content), actionDom);\n  var cls = classNames(prefixCls, _defineProperty({}, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), className);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, otherProps, {\n    className: cls\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-inner\")\n  }, avatarDom, contentDom), children ? renderNested(prefixCls, children) : null);\n};\n\nexport default Comment;","import React from \"react\";\nimport s from \"./Post.module.css\";\nimport {Avatar, Comment, Tooltip} from 'antd';\n\n\ntype MessagePropsType = {\n    id: number\n    message: string\n    likesCount: number\n}\n\nexport function Post(props: MessagePropsType) {\n\n    return (\n        <>\n            <Comment\n                // actions={actions}\n                author={<a>Han Solo</a>}\n                avatar={\n                    <Avatar\n                        src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\n                        alt=\"Han Solo\"\n                    />\n                }\n                content={\n                    <p>\n                        {props.message}\n                    </p>\n                }\n                // datetime={\n                //     <Tooltip title={moment().format('YYYY-MM-DD HH:mm:ss')}>\n                //         <span>{moment().fromNow()}</span>\n                //     </Tooltip>\n                // }\n            />\n        </>\n    )\n}\n\n// export function Post(props: MessagePropsType) {\n//\n//     return (\n//         <div className={s.item}>\n//             <img src=\"https://whatsism.com/uploads/posts/2018-07/1530546770_rmk_vdjbx10.jpg\" alt=\"\"/>\n//             {props.message}\n//             <div>\n//                 <span>Likes</span> {props.likesCount}\n//             </div>\n//         </div>\n//     )\n// }","import React from \"react\";\nimport {InitialStateType} from \"../../../redux/profile-reducer\";\nimport s from \"./MyPosts.module.css\";\nimport {Post} from \"./Post/Post\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\ntype MyPostsPropsType = {\n    profilePage: InitialStateType\n    addPost: (newPostBody: string) => void\n}\n\n\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\n\n    console.log(\"RENDER\")\n\n    let state = props.profilePage\n\n    let postsElements = state.posts\n        .map((p) => <Post id={p.id} message={p.message} likesCount={p.likesCount}/>)\n\n    let addNewPost = (values: MyPostFormType) => {\n        props.addPost(values.newPostBody);\n    }\n\n\n    return (\n        <div className={s.myPosts}>\n            My posts\n            <div>\n                <MyPostReduxForm onSubmit={addNewPost}/>\n            </div>\n\n            {/*<div className={s.post}>*/}\n            {/*    new post*/}\n            {/*</div>*/}\n            {postsElements}\n        </div>\n    )\n})\n\ntype MyPostFormType = {\n    newPostBody: string\n}\n\nconst maxLength = maxLengthCreator(11)\n\nconst MyPostForm: React.FC<InjectedFormProps<MyPostFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field placeholder={\"Enter your post\"}\n                   name={\"newPostBody\"}\n                   component={Textarea}\n                   validate={[required, maxLength]}\n            />\n            <button>Add post</button>\n        </form>\n    )\n}\n\nconst MyPostReduxForm = reduxForm<MyPostFormType>({\n    // a unique name for the form\n    form: 'MyPostForm'\n})(MyPostForm)","import React from \"react\";\nimport {AddPostActionCreator, InitialStateType} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {Dispatch} from \"redux\";\nimport {AllAppStateType} from \"../../../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\n\nexport type MapStatePropsType = {\n    profilePage: InitialStateType\n}\n\nexport type MapDispatchPropsType = {\n    addPost: (newPostBody: string) => void\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        profilePage: state.profilePage\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        addPost: (newPostBody) => {\n            dispatch(AddPostActionCreator(newPostBody))\n        }\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from \"react\";\nimport {ProfileFormDataType, ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from \"./ProfileContainer\";\nimport {photoFileType} from \"../../redux/profile-reducer\";\n\n\ntype ProfilePropsType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    changePhoto: (file: photoFileType) => void\n    editProfileDataTC: (formData: ProfileFormDataType) => void\n    changeProfileUpdateSuccessAC: (profileUpdateSuccess: boolean) => void\n}\n\n\nexport const Profile = React.memo((props: ProfilePropsType) =>  {\n\n    return (\n        <div>\n            <ProfileInfo profile={props.profile}\n                         status={props.status}\n                         updateStatus={props.updateStatus}\n                         isOwner={props.isOwner}\n                         changePhoto={props.changePhoto}\n                         editProfileDataTC={props.editProfileDataTC}\n                         changeProfileUpdateSuccessAC={props.changeProfileUpdateSuccessAC}\n\n            />\n            <MyPostsContainer />\n        </div>\n    )\n})","import React from \"react\";\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    changePhotoTC, changeProfileUpdateSuccessAC,\n    editProfileDataTC,\n    getProfileTC,\n    getStatusTC,\n    photoFileType,\n    updateStatusTC\n} from \"../../redux/profile-reducer\";\nimport {AllAppStateType} from \"../../redux/redux-store\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\nimport {ProfileFormDataType} from \"./ProfileInfo/ProfileInfo\";\n\n\nexport type ContactsType = {\n    facebook: string\n    website: string\n    vk: string\n    twitter: string\n    instagram: string\n    youtube: string\n    github: string\n    mainLink: string\n}\n\nexport type PhotosType = {\n    small: string\n    large: string\n}\n\nexport type ProfileType = {\n    AboutMe: string\n    contacts: {[key:string]: string}\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    userId: number\n    photos: PhotosType\n    onSubmit: () => void\n}\n\nexport type ProfileContainerPropsType = {\n    profile: ProfileType\n    getProfileTC: (userId: string) => void\n    getStatusTC: (userId: string) => void\n    status: string\n    updateStatusTC: (status: string) => void\n    authorizedUserId: string\n    isFetching: boolean\n    changePhotoTC: (file: photoFileType) => void\n    editProfileDataTC: (formData: ProfileFormDataType) => void\n    changeProfileUpdateSuccessAC: (profileUpdateSuccess: boolean) => void\n}\n\n\ntype PathParamType = {\n    userId: string\n}\n\nexport type CommonPropsType = RouteComponentProps<PathParamType> & ProfileContainerPropsType\n\nclass ProfileContainer extends React.Component<CommonPropsType> {\n\n    refreshProfile () {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n\n        this.props.getProfileTC(userId);\n        this.props.getStatusTC(userId)\n    }\n\n\n\n    componentDidMount() {\n       this.refreshProfile()\n\n    }\n\n\n    componentDidUpdate(prevProps: Readonly<CommonPropsType>, prevState: Readonly<{}>) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n\n    render() {\n\n        return (\n            <>\n                <Profile {...this.props}\n                         isOwner={!this.props.match.params.userId}\n                         profile={this.props.profile}\n                         status={this.props.status}\n                         updateStatus={this.props.updateStatusTC}\n                         changePhoto={this.props.changePhotoTC}\n                         editProfileDataTC={this.props.editProfileDataTC}\n                         changeProfileUpdateSuccessAC={this.props.changeProfileUpdateSuccessAC}\n                />\n            </>\n\n        )\n    }\n}\n\nlet mapStateToProps = (state: AllAppStateType) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.id,\n    isAuth: state.auth.isAuth,\n    isFetching: state.usersPage.isFetching\n})\n\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getProfileTC, getStatusTC, updateStatusTC, changePhotoTC, editProfileDataTC, changeProfileUpdateSuccessAC}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer);\n"],"sourceRoot":""}
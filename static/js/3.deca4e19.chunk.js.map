{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","ProfileInfo","profile","className","s","profileInfo","src","alt","description","photos","large","aboutMe","contacts","facebook","instagram","Preloader","Post","item","message","likesCount","MyPosts","React","memo","console","log","postsElements","profilePage","posts","map","p","id","myPosts","MyPostReduxForm","onSubmit","values","addPost","newPostBody","post","maxLength","maxLengthCreator","reduxForm","form","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","MyPostsContainer","connect","state","dispatch","AddPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getProfileTC","getStatusTC","updateStatusTC","Component","compose","auth","isAuth","isFetching","usersPage","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.deca4e19.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__1FWdy\",\"profileInfo\":\"ProfileInfo_profileInfo__P25yp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1woWL\",\"post\":\"MyPosts_post__1V8Cz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2BJYU\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\n\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\n\n    const [editMode, setEditMode] = useState(false);\n    const [status, setStatus] = useState(\"\");\n\n    useEffect( () => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n    const deActivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    return (\n        <div>\n            { !editMode ?\n                <div>\n                    <span onDoubleClick={activateEditMode}>{props.status || \"No status\"}</span>\n                </div>\n                :\n                <div>\n                    <input\n                        onChange={onChangeStatus}\n                        autoFocus={true}\n                        onBlur={deActivateEditMode}\n                        value={status}\n                    />\n                </div>\n            }\n        </div>\n    )\n}\n","import React from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {ProfileType} from \"../ProfileContainer\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\n\n\ntype ProfileInfoPropsType = {\n    profile?: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, status, updateStatus}) => {\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div className={s.profileInfo}>\n            <img\n                src=\"https://www.metoffice.gov.uk/binaries/content/gallery/metofficegovuk/hero-images/advice/beaches--ocean/aerial-view-of-the-beach-shore.jpg\"\n                alt=\"\"/>\n            <div className={s.description}>\n                <img src={profile.photos.large}/>\n                <ProfileStatusWithHooks status={status}\n                               updateStatus={updateStatus}\n                />\n                <div>\n                    Обо мне:\n                    {profile.aboutMe}\n                </div>\n                Контакты:\n                <div>\n                    {profile.contacts.facebook}\n                </div>\n                <div>\n                    {profile.contacts.instagram}\n                </div>\n\n            </div>\n        </div>\n    )\n};","import React from \"react\";\nimport s from \"./Post.module.css\";\n\n\ntype MessagePropsType = {\n    id: number\n    message: string\n    likesCount: number\n}\n\nexport function Post(props: MessagePropsType) {\n\n    return (\n        <div className={s.item}>\n            <img src=\"https://whatsism.com/uploads/posts/2018-07/1530546770_rmk_vdjbx10.jpg\" alt=\"\"/>\n            {props.message}\n            <div>\n                <span>Likes</span> {props.likesCount}\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport {InitialStateType} from \"../../../redux/profile-reducer\";\nimport s from \"./MyPosts.module.css\";\nimport {Post} from \"./Post/Post\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\ntype MyPostsPropsType = {\n    profilePage: InitialStateType\n    addPost: (newPostBody: string) => void\n}\n\n\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\n\n    console.log(\"RENDER\")\n\n    let state = props.profilePage\n\n    let postsElements = state.posts\n        .map((p) => <Post id={p.id} message={p.message} likesCount={p.likesCount}/>)\n\n    let addNewPost = (values: MyPostFormType) => {\n        props.addPost(values.newPostBody);\n    }\n\n\n    return (\n        <div className={s.myPosts}>\n            My posts\n            <div>\n                <MyPostReduxForm onSubmit={addNewPost}/>\n            </div>\n\n            <div className={s.post}>\n                new post\n            </div>\n            {postsElements}\n        </div>\n    )\n})\n\ntype MyPostFormType = {\n    newPostBody: string\n}\n\nconst maxLength = maxLengthCreator(11)\n\nconst MyPostForm: React.FC<InjectedFormProps<MyPostFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field placeholder={\"Enter your post\"}\n                   name={\"newPostBody\"}\n                   component={Textarea}\n                   validate={[required, maxLength]}\n            />\n            <button>Add post</button>\n        </form>\n    )\n}\n\nconst MyPostReduxForm = reduxForm<MyPostFormType>({\n    // a unique name for the form\n    form: 'MyPostForm'\n})(MyPostForm)","import React from \"react\";\nimport {AddPostActionCreator, InitialStateType} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {Dispatch} from \"redux\";\nimport {AllAppStateType} from \"../../../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\n\nexport type MapStatePropsType = {\n    profilePage: InitialStateType\n}\n\nexport type MapDispatchPropsType = {\n    addPost: (newPostBody: string) => void\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        profilePage: state.profilePage\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        addPost: (newPostBody) => {\n            dispatch(AddPostActionCreator(newPostBody))\n        }\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from \"react\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from \"./ProfileContainer\";\n\n\ntype ProfilePropsType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n}\n\n\nexport const Profile = React.memo((props: ProfilePropsType) =>  {\n\n    return (\n        <div>\n            <ProfileInfo profile={props.profile}\n                         status={props.status}\n                         updateStatus={props.updateStatus}\n            />\n            <MyPostsContainer />\n        </div>\n    )\n})","import React from \"react\";\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getProfileTC, getStatusTC, updateStatusTC} from \"../../redux/profile-reducer\";\nimport {AllAppStateType} from \"../../redux/redux-store\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\n\n\nexport type ContactsType = {\n    \"facebook\": string\n    \"website\": string\n    \"vk\": string\n    \"twitter\": string\n    \"instagram\": string\n    \"youtube\": string\n    \"github\": string\n    \"mainLink\": string\n}\n\nexport type PhotosType = {\n    small: string\n    large: string\n}\n\nexport type ProfileType = {\n    aboutMe: string\n    contacts: ContactsType\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    userId: number\n    photos: PhotosType\n}\n\nexport type ProfileContainerPropsType = {\n    profile: ProfileType\n    getProfileTC: (userId: string) => void\n    getStatusTC: (userId: string) => void\n    status: string\n    updateStatusTC: (status: string) => void\n    authorizedUserId: string\n    isFetching: boolean\n\n}\n\n\ntype PathParamType = {\n    userId: string\n}\n\nexport type CommonPropsType = RouteComponentProps<PathParamType> & ProfileContainerPropsType\n\nclass ProfileContainer extends React.Component<CommonPropsType> {\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n\n        this.props.getProfileTC(userId);\n        this.props.getStatusTC(userId)\n    }\n\n\n\n    render() {\n        // if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\n\n        return (\n            <>\n                {/*{this.props.isFetching && <Preloader/>}*/}\n                <Profile {...this.props}\n                         profile={this.props.profile}\n                         status={this.props.status}\n                         updateStatus={this.props.updateStatusTC}\n                />\n            </>\n\n        )\n    }\n}\n\nlet mapStateToProps = (state: AllAppStateType) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.id,\n    isAuth: state.auth.isAuth,\n    isFetching: state.usersPage.isFetching\n})\n\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getProfileTC, getStatusTC, updateStatusTC}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer);\n"],"sourceRoot":""}
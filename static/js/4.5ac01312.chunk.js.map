{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/AddMessageForm/AddMessageForm.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Dialogs/Dialogs.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","compose","connect","state","dialogsPage","dispatch","sendMessage","newMessageBody","AddMessageActionCreator","withAuthRedirect","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","messagesItems","values"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,cAAgB,+BAA+B,QAAU,yBAAyB,OAAS,0B,6FCSvN,SAASC,EAAWC,GACvB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,SCJ/B,SAASC,EAAQT,GACpB,OACI,qBAAKG,UAAWC,IAAEM,QAAlB,SACKV,EAAMU,U,qCCRbC,EAAYC,YAAiB,IAsBpBC,cAA8B,CAEzCC,KAAM,wBAFKD,EAfyD,SAACb,GACrE,OACI,uBAAMe,SAAUf,EAAMgB,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOC,YAAa,qBACbV,KAAM,iBACNW,UAAWC,IACXC,SAAU,CAACC,IAAUX,KAE5B,8BACI,0D,4BCgBAY,sBACZC,aAhBkB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACC,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,EAASG,YAAwBD,SAQzCE,IAFYR,EClBT,SAAiBvB,GAEpB,IAAIyB,EAAQzB,EAAM0B,YAEdM,EAAkBP,EAAMQ,QACvBC,KAAI,SAACC,GAAD,OAAO,cAACpC,EAAD,CAAuBG,GAAIiC,EAAEjC,GAAIM,KAAM2B,EAAE3B,MAAxB2B,EAAEjC,OAE/BkC,EAAmBX,EAAMY,SACxBH,KAAI,SAACI,GAAD,OAAO,cAAC7B,EAAD,CAAoBP,GAAIoC,EAAEpC,GAAIQ,QAAS4B,EAAE5B,SAA3B4B,EAAEpC,OAOhC,OACI,sBAAKC,UAAWC,IAAE6B,QAAlB,UACI,qBAAK9B,UAAWC,IAAEmC,aAAlB,SACKP,IAEL,sBAAK7B,UAAWC,IAAEoC,cAAlB,UACKJ,EACD,cAAC,EAAD,CAAgBrB,SAXR,SAAC0B,GACjBzC,EAAM4B,YAAYa,EAAOZ","file":"static/js/4.5ac01312.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1rZ3k\",\"dialogsItems\":\"Dialogs_dialogsItems__2cvy3\",\"dialog\":\"Dialogs_dialog__3uLyt\",\"messagesItems\":\"Dialogs_messagesItems__1yMkL\",\"message\":\"Dialogs_message__2QPe0\",\"active\":\"Dialogs_active__2jYYF\"};","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport s from \"./../Dialogs.module.css\"\n\n\ntype DialogItemPropsType = {\n    id: number,\n    name: string\n}\n\nexport function DialogItem(props: DialogItemPropsType) {\n    let path = \"/dialogs/\" + props.id;\n    return (\n        <div className={s.dialog + \" \" + s.active}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n};\n","import React from \"react\";\nimport s from \"./../Dialogs.module.css\"\n\n\n\ntype MessagePropsType = {\n    id: number\n    message: string\n}\n\nexport function Message(props: MessagePropsType) {\n    return (\n        <div className={s.message}>\n            {props.message}\n        </div>\n    )\n}\n\n","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\nconst maxLength = maxLengthCreator(20)\n\n\nexport type AddMessageFormType = {\n    newMessageBody: string\n}\n\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field placeholder={\"Enter your message\"}\n                   name={\"newMessageBody\"}\n                   component={Textarea}\n                   validate={[required, maxLength]}\n            />\n            <div>\n                <button>Sent message</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<AddMessageFormType>({\n    // a unique name for the form\n    form: 'dialogAddMessageForm'\n})(AddMessageForm)","import React from \"react\";\nimport {\n    AddMessageActionCreator,\n    InitialStateType\n} from \"../../redux/dialogs-reducer\";\nimport {AllAppStateType} from \"../../redux/redux-store\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {compose, Dispatch} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\n\n\nexport type MapStatePropsType = {\n    dialogsPage: InitialStateType,\n    // isAuth: boolean\n}\n\nexport type MapDispatchPropsType = {\n    sendMessage: (newMessageBody: string) => void\n}\n\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        sendMessage: (newMessageBody: string) => {\n            dispatch(AddMessageActionCreator(newMessageBody))\n        }\n\n    }\n}\n\nexport  default compose<React.ComponentType> (\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);","import React from \"react\";\nimport s from \"./Dialogs.module.css\"\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\nimport AddMessageForm, {AddMessageFormType} from \"./AddMessageForm/AddMessageForm\";\n\n\nexport type DialogsPropsType = {\n    dialogsPage: InitialStateType\n    updateNewMessageText: (text: string) => void\n    sendMessage: (newMessageBody: string) => void\n    isAuth: boolean\n\n}\n\nexport function Dialogs(props: DialogsPropsType) {\n\n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs\n        .map((d) => <DialogItem key={d.id} id={d.id} name={d.name}/>)\n\n    let messagesElements = state.messages\n        .map((m) => <Message key={m.id} id={m.id} message={m.message}/>)\n\n\n    let addNewMessage = (values: AddMessageFormType) => {\n        props.sendMessage(values.newMessageBody);\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messagesItems}>\n                {messagesElements}\n                <AddMessageForm onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    )\n}\n\n\n// const maxLength = maxLengthCreator(20)\n//\n//\n// type AddMessageFormType = {\n//     newMessageBody: string\n// }\n//\n// const AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\n//     return (\n//         <form onSubmit={props.handleSubmit}>\n//             <Field placeholder={\"Enter your message\"}\n//                    name={\"newMessageBody\"}\n//                    component={Textarea}\n//                    validate={[required, maxLength]}\n//             />\n//             <div>\n//                 <button>Sent message</button>\n//             </div>\n//         </form>\n//     )\n// }\n//\n// const AddMessageReduxForm = reduxForm<AddMessageFormType>({\n//     // a unique name for the form\n//     form: 'dialogAddMessageForm'\n// })(AddMessageForm)"],"sourceRoot":""}
{"version":3,"sources":["utils/validators/validators.ts","Components/common/Paginator/Paginator.module.css","hoc/WithAuthRedirect.tsx","redux/profile-reducer.ts","assets/images/UserAvatar.jpeg","redux/dialogs-reducer.ts","api/api.ts","reportWebVitals.ts","Components/News/News.tsx","Components/Music/Music.tsx","utils/helpers/object-helpers.ts","redux/users-reducer.ts","Components/common/Paginator/Paginator.tsx","Components/Users/User.tsx","Components/Users/Users.tsx","redux/users-selectors.ts","Components/Users/UsersContainer.tsx","redux/auth-reducer.ts","Components/Login/Login.tsx","redux/app-reducer.ts","redux/redux-store.ts","hoc/WithSuspense.tsx","redux/auth-selectors.ts","assets/images/shazam.svg","Components/Header/Header.tsx","App.tsx","index.tsx","Components/common/FormsControls/FormsControls.tsx","assets/images/preloader.svg","Components/common/Preloader/Preloader.tsx","Components/common/FormsControls/FormsControls.module.css","Components/Users/Users.module.css"],"names":["required","value","maxLengthCreator","maxValue","length","module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","ADD_POST","SET_USER_PROFILE","GET_STATUS","DELETE_POST","CHANGE_PHOTO","PROFILE_UPDATE_SUCCESS","initialState","posts","id","message","likesCount","profile","AboutMe","contacts","lookingForAJob","lookingForAJobDescription","fullName","userId","photos","large","small","status","profileUpdateSuccess","profileReducer","action","type","photo","filter","p","postId","newPost","Date","getTime","newPostBody","AddPostActionCreator","getStatusAC","changeProfileUpdateSuccessAC","getProfileTC","dispatch","a","profileAPI","getProfile","response","data","getStatusTC","getStatus","updateStatusTC","updateStatus","resultCode","error","content","messages","duration","changePhotoTC","file","changePhoto","editProfileDataTC","formData","getState","editProfileData","toString","field","slice","indexOf","toLowerCase","stopSubmit","ADD_MESSAGE","dialogs","name","dialogsReducer","newMessage","newMessageBody","AddMessageActionCreator","instance","axios","create","withCredentials","headers","baseURL","usersAPI","getUsers","currentPage","pageSize","get","unfollow","userID","delete","follow","post","authAPI","authMe","loginMe","email","password","rememberMe","captcha","logoutMe","securityAPI","getCaptchaUrl","put","bodyFormData","FormData","append","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","News","Music","updateObjectInArray","items","itemId","itemPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","InitialState","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingInProgress","followUnfollowFlow","apiMethod","actionCreator","Paginator","totalItemsCount","getNewUserPage","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","selectedPageStyle","style","selectedPage","page","onClick","className","User","user","avatar","src","UserAvatar","alt","followed","disabled","some","Users","createSelector","usersPage","getUsersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersAPIComponent","newPage","requestUsers","this","Preloader","React","compose","totalCount","bind","SET_USER_LOGIN_DATA","GET_CAPTCHA_URL_SUCCESS","login","captchaUrl","setAuthUserDataAC","payload","getAuthUserData","url","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","createField","Input","commonError","_error","INITIALIZED_SUCCESS","initialized","rootReducer","combineReducers","profilePage","dialogsPage","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","fallback","selectIsAuth","selectCurrentUserLogin","AppHeader","useSelector","useDispatch","span","Testlogo","width","backgroundColor","icon","UserOutlined","Menu","SubMenu","Layout","Header","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","App","onClose","e","console","log","InitializedSuccessTC","addEventListener","reason","removeEventListener","padding","mode","defaultSelectedKeys","height","Item","HomeOutlined","TeamOutlined","MailOutlined","PlaySquareOutlined","GlobalOutlined","minHeight","exact","path","render","UsersContainer","component","textAlign","AppContainer","promis","Promise","all","withRouter","SocialNetworkApp","ReactDOM","StrictMode","document","getElementById","FormsControl","meta","touched","children","hasError","formsControl","Textarea","input","placeholder","validate","text","preloaderWrapper","preloader"],"mappings":"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","file":"static/js/main.eebf16ad.chunk.js","sourcesContent":["\nexport type FieldValidatorType = (value: string) => string | undefined\n\nexport const required:FieldValidatorType = (value) => {\n    if (value) return undefined;\n    return \"Field should be required\"\n}\n\nexport const maxLengthCreator = (maxValue: number):FieldValidatorType => (value) => {\n    if (value && value.length < maxValue) return undefined\n    return `Max length ${maxValue} symbols`\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__1dlDZ\",\"page\":\"Paginator_page__r0w9s\"};","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport { AllAppStateType } from \"../redux/redux-store\";\n\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\n\n    function RedirectComponent(props: MapStateToPropsType) {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...restProps as T}/>\n    }\n\n\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n\n}","import {ProfileType} from \"../Components/Profile/ProfileContainer\";\nimport {Dispatch} from \"redux\";\nimport {authAPI, profileAPI} from \"../api/api\";\nimport {ProfileFormDataType} from \"../Components/Profile/ProfileInfo/ProfileInfo\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AllAppActionType, AllAppStateType} from \"./redux-store\";\nimport {StateType} from \"./store\";\nimport {stopSubmit} from \"redux-form\";\nimport {message} from 'antd';\n\nconst ADD_POST = \"PROFILE/ADD-POST\";\nconst SET_USER_PROFILE = \"PROFILE/SET_USER_PROFILE\";\nconst GET_STATUS = \"PROFILE/GET_STATUS\";\nconst DELETE_POST = \"PROFILE/DELETE_POST\";\nconst CHANGE_PHOTO = \"PROFILE/CHANGE_PHOTO\";\nconst EDIT_PROFILE = \"PROFILE/EDIT_PROFILE\";\nconst PROFILE_UPDATE_SUCCESS = \"PROFILE/PROFILE_UPDATE_SUCCESS\";\n\nlet initialState = {\n    posts: [\n        {id: 1, message: \"Hello, how are you?\", likesCount: 23},\n        {id: 2, message: \"Its my first post\", likesCount: 5}\n    ] as PostsType[],\n    profile: {\n        AboutMe: \"\",\n        contacts: {},\n        lookingForAJob: false,\n        lookingForAJobDescription: \"\",\n        fullName: \"\",\n        userId: 0,\n        photos: {large: null as null | string, small: null as null | string,}\n    },\n    status: \"\",\n    profileUpdateSuccess: false\n}\n\nexport type photoFileType = {\n    lastModified: number\n    lastModifiedDate?: string\n    name: string\n    size: number\n    type: string\n    webkitRelativePath?: string\n}\n\nexport const profileReducer = (state: InitialStateType = initialState, action: ProfileActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case PROFILE_UPDATE_SUCCESS:\n            return {\n                ...state,\n                profileUpdateSuccess: action.profileUpdateSuccess\n            }\n        case CHANGE_PHOTO:\n            return {...state, profile: {...state.profile, photos: action.photo}}\n        case DELETE_POST:\n            return {...state, posts: state.posts.filter((p) => p.id !== action.postId)}\n        case ADD_POST:\n            const newPost: PostsType = {\n                id: new Date().getTime(),\n                message: action.newPostBody,\n                likesCount: 0\n            }\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            }\n        case SET_USER_PROFILE:\n            return {\n                ...state,\n                profile: action.profile\n            }\n        case GET_STATUS:\n            return {\n                ...state,\n                status: action.status\n            }\n        default:\n            return state\n    }\n}\n\n\n// ACTIONS\nexport const AddPostActionCreator = (newPostBody: string) => ({type: ADD_POST, newPostBody: newPostBody} as const)\nexport const setUserProfile = (profile: ProfileType) => ({type: SET_USER_PROFILE, profile} as const)\nexport const getStatusAC = (status: string) => ({type: GET_STATUS, status} as const)\nexport const deletePost = (postId: number) => ({type: DELETE_POST, postId} as const)\nexport const changePhotoAC = (photo: { large: string; small: string; }) => ({type: CHANGE_PHOTO, photo} as const)\nexport const editProfileDataAC = (profile: ProfileType) => ({type: EDIT_PROFILE, profile} as const)\nexport const changeProfileUpdateSuccessAC = (profileUpdateSuccess: boolean) => ({\n    type: PROFILE_UPDATE_SUCCESS,\n    profileUpdateSuccess\n} as const)\n\n// TYPES\nexport type InitialStateType = typeof initialState\nexport type ProfileActionsTypes = ReturnType<typeof AddPostActionCreator>\n    | ReturnType<typeof setUserProfile>\n    | ReturnType<typeof getStatusAC>\n    | ReturnType<typeof deletePost>\n    | ReturnType<typeof changePhotoAC>\n    | ReturnType<typeof editProfileDataAC>\n    | ReturnType<typeof changeProfileUpdateSuccessAC>\nexport type PostsType = {\n    id: number\n    message: string\n    likesCount: number\n}\n\n// THUNKS\nexport const getProfileTC = (userId: string) => async (dispatch: Dispatch<ProfileActionsTypes>) => {\n    const response = await profileAPI.getProfile(userId)\n    dispatch(setUserProfile(response.data))\n}\n\nexport const getStatusTC = (userId: string) => async (dispatch: Dispatch<ProfileActionsTypes>) => {\n    const response = await profileAPI.getStatus(userId)\n    dispatch(getStatusAC(response.data))\n}\n\nexport const updateStatusTC = (status: string) => async (dispatch: Dispatch<ProfileActionsTypes>) => {\n    try {\n        const response = await profileAPI.updateStatus(status)\n        if (response.data.resultCode === 0) {\n            dispatch(getStatusAC(status))\n        } else {\n            message.error({content: response.data.messages[0], duration: 1.5})\n        }\n    } catch (error) {\n        message.error({content: error.message, duration: 1.5})\n    }\n\n}\n\nexport const changePhotoTC = (file: photoFileType) => async (dispatch: Dispatch<ProfileActionsTypes>) => {\n    const response = await profileAPI.changePhoto(file)\n    if (response.data.resultCode === 0) {\n        dispatch(changePhotoAC(response.data.data.photos))\n    }\n}\n\nexport const editProfileDataTC = (formData: ProfileType): ThunkAction<void, AllAppStateType, unknown, AllAppActionType> => async (dispatch, getState) => {\n    const userId = getState().auth.id\n    const response = await profileAPI.editProfileData(formData)\n\n    if (response.data.resultCode === 0) {\n        dispatch(getProfileTC(userId.toString()))\n        dispatch(changeProfileUpdateSuccessAC(false))\n    } else {\n        let message = response.data.messages[0]\n        // let indexStrelki = message.indexOf('>')\n        let field = message.slice(message.indexOf('>') + 1, -1).toLowerCase()\n        dispatch(stopSubmit(\"Edit profile\", {contacts: {[field]: message}}))\n        dispatch(changeProfileUpdateSuccessAC(true))\n    }\n}","export default __webpack_public_path__ + \"static/media/UserAvatar.475d2a0a.jpeg\";","const ADD_MESSAGE = \"DIALOGS/ADD-MESSAGE\";\n\nexport type DialogsActionsTypes = ReturnType<typeof AddMessageActionCreator>\n\nexport type DialogsType = {\n    id: number\n    name: string\n}\nexport type MessageType = {\n    id: number\n    message: string\n}\n\nexport type InitialStateType = typeof initialState\n\nlet initialState = {\n    dialogs: [\n        {id: 1, name: \"Петя\"},\n        {id: 2, name: \"Ваня\"},\n        {id: 3, name: \"Маня\"},\n        {id: 4, name: \"Миша\"},\n        {id: 5, name: \"Коля\"},\n    ] as DialogsType[] ,\n    messages: [\n        {id: 1, message: \"Привет, как дела?\"},\n        {id: 2, message: \"Хехей!\"},\n        {id: 3, message: \"Как твой прогресс?\"},\n        {id: 4, message: \"Какую музыку случаешь?\"},\n        {id: 5, message: \"Как твоя собака?\"},\n    ] as MessageType[],\n}\n\nexport const dialogsReducer = (state: InitialStateType = initialState, action: DialogsActionsTypes): InitialStateType  => {\n    switch (action.type) {\n        case ADD_MESSAGE:\n            const newMessage: MessageType = {\n                id: new Date().getTime(),\n                message: action.newMessageBody\n            }\n            return {\n                ...state,\n                messages: [...state.messages, newMessage],\n            }\n        default:\n            return state\n    }\n}\ntype AddMessageType = {\n    type: typeof ADD_MESSAGE\n    newMessageBody: string\n}\nexport const AddMessageActionCreator = (newMessageBody: string) : AddMessageType => ({\n    type: ADD_MESSAGE,\n    newMessageBody: newMessageBody\n}) as const\n\n","import axios from \"axios\";\nimport {photoFileType} from \"../redux/profile-reducer\";\nimport {ProfileType} from \"../Components/Profile/ProfileContainer\";\nimport {ProfileFormDataType} from \"../Components/Profile/ProfileInfo/ProfileInfo\";\n\nexport const instance = axios.create({\n    withCredentials: true,\n    headers: {\"API-KEY\": \"792fb186-796b-4fb1-b58b-aab163ce4b24\"},\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\"\n})\n\nexport const usersAPI = {\n    async getUsers (currentPage: number, pageSize: number) {\n        return await instance.get(`users?page=${currentPage}&count=${pageSize}`)\n    },\n    async unfollow (userID: number) {\n        return await instance.delete<CommonResponseType>(`follow/${userID}`)\n    },\n    async follow (userID: number) {\n        return await instance.post<CommonResponseType>(`follow/${userID}`)\n    }\n}\n\nexport const authAPI = {\n    async authMe () {\n        return await instance.get(`auth/me`)\n    },\n    async loginMe (email: string, password: string, rememberMe: boolean = false, captcha: string) {\n        return await instance.post(`auth/login`, {email, password, rememberMe, captcha})\n    },\n    async logoutMe () {\n        return await instance.delete(`auth/login`)\n    },\n}\n\nexport const securityAPI = {\n    async getCaptchaUrl () {\n        return await instance.get(`/security/get-captcha-url`)\n    }\n}\n\nexport const profileAPI = {\n    async getProfile(userId: string) {\n        return await instance.get(`profile/${userId}`)\n    },\n    async getStatus(userId: string) {\n        return await instance.get(`profile/status/${userId}`)\n    },\n    async updateStatus(status: string) {\n        return await instance.put(`profile/status`, {status: status})\n    },\n    async changePhoto(file: photoFileType) {\n        const bodyFormData = new FormData();\n        // @ts-ignore\n        bodyFormData.append('image', file);\n        return await instance.put(`/profile/photo`, bodyFormData, {\n            headers: { \"Content-Type\": \"multipart/form-data\" }\n        })\n    },\n    async editProfileData(profile: ProfileType) {\n        return await instance.put('profile', profile)\n    }\n}\n\nexport type CommonResponseType<T = {}> = {\n    data: T\n    messages: string[]\n    fieldsErrors: string[]\n    resultCode: number\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\nexport function News () {\n    return (\n        <div>\n            News\n        </div>\n    )\n}","import React from \"react\";\n\nexport function Music () {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}","import {UserType} from \"../../redux/users-reducer\";\n\nexport const updateObjectInArray = (items: UserType[], itemId: number, itemPropName: string, newObjProps: { followed: true | false } ) => {\n    return items.map(u => {\n        // @ts-ignore\n        if (u[itemPropName] === itemId) {\n            return {...u, ...newObjProps}\n        }\n        return u\n    })\n}","import {CommonResponseType, usersAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport {AxiosResponse} from \"axios\";\nimport {updateObjectInArray} from \"../utils/helpers/object-helpers\";\n\nexport const FOLLOW = \"USERS/FOLLOW\"\nexport const UNFOLLOW = \"USERS/UNFOLLOW\"\nexport const SET_USERS = \"USERS/SET_USERS\"\nexport const SET_CURRENT_PAGE = \"USERS/SET_CURRENT_PAGE\"\nexport const SET_USERS_TOTAL_COUNT = \"USERS/SET_USERS_TOTAL_COUNT\"\nexport const TOGGLE_IS_FETCHING = \"USERS/TOGGLE_IS_FETCHING\"\nexport const TOGGLE_IS_FOLLOWING_PROGRESS = \"USERS/TOGGLE_IS_FOLLOWING_PROGRESS\"\n\nlet InitialState: InitialStateType = {\n    users: [],\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: []\n}\n\nexport const UserReducer = (state: InitialStateType = InitialState, action: UsersActionType): InitialStateType => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\n            }\n        case SET_USERS:\n            return {\n                ...state,\n                users: [...action.users]\n            }\n        case SET_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        case SET_USERS_TOTAL_COUNT:\n            return {\n                ...state,\n                totalUsersCount: action.totalCount\n            }\n        case TOGGLE_IS_FETCHING:\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userID]\n                    : [...state.followingInProgress.filter(id => id !== action.userID)]\n            }\n        default:\n            return state\n    }\n}\n\n\n// ACTIONS\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId} as const)\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId} as const)\nexport const setUsers = (users: UserType[]) => ({type: SET_USERS, users} as const)\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\nexport const setUsersTotalCount = (totalCount: number) => ({type: SET_USERS_TOTAL_COUNT, totalCount} as const)\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\nexport const toggleFollowingInProgress = (isFetching: boolean, userID: number) => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userID} as const)\n\n// TYPES\nexport type UsersActionType = ReturnType<typeof followSuccess>\n    | ReturnType<typeof unfollowSuccess>\n    | ReturnType<typeof setUsers>\n    | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof setUsersTotalCount>\n    | ReturnType<typeof toggleIsFetching>\n    | ReturnType<typeof toggleFollowingInProgress>\n\nexport type InitialStateType = {\n    users: UserType[]\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: number[]\n}\n\nexport type UserAvatarType = {\n    small: string\n    large: string\n}\n\nexport type UserType = {\n    id: number\n    photos: UserAvatarType\n    followed: boolean,\n    name: string\n    status: string\n}\n\n\n// THUNKS\nexport const requestUsers = (page: number, pageSize: number) => async (dispatch: Dispatch) => {\n    dispatch(toggleIsFetching(true))\n    const response = await usersAPI.getUsers(page, pageSize)\n    dispatch(setCurrentPage(page))\n    dispatch(toggleIsFetching(false))\n    dispatch(setUsers(response.data.items))\n    dispatch(setUsersTotalCount(response.data.totalCount))\n}\n\nexport const followUnfollowFlow = async (dispatch: Dispatch, userId: number, apiMethod: (userID: number) => Promise<AxiosResponse<CommonResponseType>>, actionCreator: (userId: number) => {type: \"USERS/FOLLOW\" | \"USERS/UNFOLLOW\", userId: number}) => {\n    dispatch(toggleFollowingInProgress(true, userId))\n    const response = await apiMethod(userId)\n    if (response.data.resultCode === 0) {\n        dispatch(actionCreator(userId))\n    }\n    dispatch(toggleFollowingInProgress(false, userId))\n}\n\nexport const follow = (userId: number) => async (dispatch: Dispatch) => {\n    await followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess)\n}\n\nexport const unfollow = (userId: number) => async (dispatch: Dispatch) => {\n    await followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\n}","import style from \"./Paginator.module.css\";\nimport React, {useState} from \"react\";\n\nexport type PaginatorPropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage: number\n    getNewUserPage: (p: number) => void\n    portionSize: number\n}\n\nexport const Paginator:React.FC<PaginatorPropsType> = ({totalItemsCount, pageSize,getNewUserPage, currentPage, portionSize}) => {\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n    let pages = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    const portionCount = Math.ceil(pagesCount / portionSize)\n    const [portionNumber, setPortionNumber] = useState(1)\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\n    const rightPortionPageNumber = portionNumber * portionSize\n\n    const selectedPageStyle = `${style.selectedPage} + ${style.page}`\n\n    return (\n            <div>\n                { portionNumber > 1 &&\n                <button onClick={() => {setPortionNumber(portionNumber - 1) }} >PREV</button>\n                }\n\n\n                {pages\n                    .filter( (p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber )\n                    .map(p => <span key={p} onClick={() => getNewUserPage(p)}\n                                      className={currentPage === p ? selectedPageStyle : style.page}>{p}</span>)}\n\n\n                { portionNumber !== portionCount &&\n                <button onClick={() => {setPortionNumber(portionNumber + 1) }} >NEXT</button>\n                }\n            </div>\n    )\n}","import style from \"./Users.module.css\";\nimport UserAvatar from \"../../assets/images/UserAvatar.jpeg\";\nimport React from \"react\";\nimport {UserType} from \"../../redux/users-reducer\";\nimport {NavLink} from \"react-router-dom\";\n\nexport type UserPropsType = {\n    followingInProgress: number []\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    user: UserType\n}\n\nexport const User: React.FC<UserPropsType> = ({followingInProgress,\n                                                  unfollow,\n                                                  follow,\n                                                  user\n                                              }) => {\n\n    return (\n        <div>\n            <div className={style.avatar}>\n                <NavLink to={\"/profile/\" + user.id}>\n                    <img src={user.photos.small !== null ? user.photos.small : UserAvatar} alt=\"avatar\"/>\n                </NavLink>\n            </div>\n            <div>\n                {user.followed\n                    ? <button disabled={followingInProgress.some(id => id === user.id)}\n                              onClick={() => {\n                                  unfollow(user.id)\n                              }\n                              }>UNFOLLOW</button>\n                    : <button disabled={followingInProgress.some(id => id === user.id)}\n                              onClick={() => {\n                                  follow(user.id)\n                              }}>FOLLOW</button>}\n            </div>\n            <div>\n                <span>{user.name}</span>\n            </div>\n            <div>\n                <span>{user.status}</span>\n            </div>\n            <div>\n                <span>{\"u.location.city\"}</span>\n            </div>\n            <div>\n                <span>{\"u.location.country\"}</span>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport {UserType} from \"../../redux/users-reducer\";\nimport {Paginator} from \"../common/Paginator/Paginator\";\nimport {User} from \"./User\";\n\nexport type UsersPropsType = {\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    getNewUserPage: (p: number) => void\n    users: UserType[]\n    followingInProgress: number []\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n}\n\nexport const Users: React.FC<UsersPropsType> = ({\n                                                    totalUsersCount,\n                                                    pageSize,\n                                                    currentPage,\n                                                    getNewUserPage,\n                                                    users,\n                                                    followingInProgress,\n                                                    unfollow,\n                                                    follow,\n                                                }) => {\n\n    return (\n        <div>\n            <Paginator totalItemsCount={totalUsersCount} pageSize={pageSize} currentPage={currentPage}\n                       getNewUserPage={getNewUserPage} portionSize={10}/>\n            <div>\n                {users.map(u => {\n                    return (\n                        <User key={u.id} followingInProgress={followingInProgress} follow={follow} unfollow={unfollow}\n                              user={u}/>\n                    )\n                })\n                }\n            </div>\n        </div>\n    )\n}","import {AllAppStateType} from \"./redux-store\";\nimport {createSelector} from \"reselect\";\n\nconst getUsersSelector = (state: AllAppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getUsers = createSelector(getUsersSelector, (users) => {\n    return users.filter( u  => true);\n})\n\n\nexport const getUsersPage = (state: AllAppStateType) => {\n    return state.usersPage\n}\n\nexport const getPageSize = (state: AllAppStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AllAppStateType) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getCurrentPage = (state: AllAppStateType) => {\n    return state.usersPage.currentPage\n}\n\nexport const getIsFetching = (state: AllAppStateType) => {\n    return state.usersPage.isFetching\n}\n\nexport const getFollowingInProgress = (state: AllAppStateType) => {\n    return state.usersPage.followingInProgress\n}","import {connect} from \"react-redux\";\nimport {AllAppStateType} from \"../../redux/redux-store\";\n\nimport {\n    follow,\n    followSuccess, requestUsers,\n    InitialStateType,\n    setCurrentPage,\n    unfollow,\n    unfollowSuccess,\n    UserType\n} from \"../../redux/users-reducer\";\nimport React from \"react\";\nimport {Users} from \"./Users\";\nimport {Preloader} from \"../common/Preloader/Preloader\";\nimport { withAuthRedirect } from \"../../hoc/WithAuthRedirect\";\nimport {compose} from \"redux\";\nimport {\n    getCurrentPage, getFollowingInProgress,\n    getIsFetching,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers,\n    getUsersPage\n} from \"../../redux/users-selectors\";\n\n\n\n\nexport type UsersAPIComponentPropsType = {\n    unfollowSuccess: (userId: number) => void\n    setCurrentPage: (pageNumber: number) => void\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    users: UserType[]\n    isFetching: boolean\n    followingInProgress: number[]\n    requestUsers: (currentPage: number, pageSize: number) => void\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n}\n\nexport class UsersAPIComponent extends React.Component<UsersAPIComponentPropsType> {\n\n    componentDidMount() {\n        const {currentPage, pageSize} = this.props\n        this.props.requestUsers(currentPage, pageSize);\n    }\n\n    getNewUserPage = (newPage: number) => {\n        const {pageSize} = this.props\n        this.props.requestUsers(newPage, pageSize);\n    }\n\n    render() {\n        return <>\n                {this.props.isFetching && <Preloader/>}\n            <Users totalUsersCount={this.props.totalUsersCount}\n                   pageSize={this.props.pageSize}\n                   currentPage={this.props.currentPage}\n                   getNewUserPage={this.getNewUserPage}\n                   follow={this.props.follow}\n                   unfollow={this.props.unfollow}\n                   users={this.props.users}\n                   followingInProgress={this.props.followingInProgress}\n            />\n        </>\n    }\n}\n\nexport type MapStatePropsType = {\n    usersPage: InitialStateType\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    users: UserType[]\n    isFetching: boolean\n    followingInProgress: number[]\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => {\n    return {\n        usersPage: getUsersPage(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        users: getUsers(state),\n        isFetching: getIsFetching(state),\n        followingInProgress: getFollowingInProgress(state)\n    }\n}\n\nexport default compose<React.ComponentType> (\n    withAuthRedirect,\n    connect(mapStateToProps,\n            {\n                followSuccess,\n                unfollowSuccess,\n                setCurrentPage,\n                requestUsers,\n                follow,\n                unfollow\n            }\n\n    ))\n(UsersAPIComponent);","import {Dispatch} from \"redux\";\nimport {authAPI, securityAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\nimport {AllAppActionType, AllAppStateType} from \"./redux-store\";\nimport {ThunkAction} from \"redux-thunk\";\n\n\nconst SET_USER_LOGIN_DATA = \"AUTH/SET_USER_LOGIN_DATA\";\nconst GET_CAPTCHA_URL_SUCCESS = \"AUTH/GET_CAPTCHA_URL_SUCCESS\";\n\nexport const initialState = {\n    id: 1,\n    email: \"\",\n    login: \"\",\n    isAuth: false,\n    captchaUrl: null as null | string\n}\n\nexport const authReducer = (state: InitialStateType = initialState, action: SetAuthUserDataACType): InitialStateType => {\n    switch (action.type) {\n        case SET_USER_LOGIN_DATA:\n        case GET_CAPTCHA_URL_SUCCESS:\n            return {\n                ...state,\n                ...action.payload,\n            }\n        default:\n            return state\n    }\n}\n\n// TYPES\nexport type InitialStateType = typeof initialState\nexport type SetAuthUserDataACType = ReturnType<typeof setAuthUserDataAC> | ReturnType<typeof getCaptchaUrlAC>\n\n// ACTION\nexport const setAuthUserDataAC = (id: number, email: string, login: string, isAuth: boolean) => ({\n    type: SET_USER_LOGIN_DATA,\n    payload: {id, email, login, isAuth}\n} as const)\n\nexport const getCaptchaUrlAC = (captchaUrl: string) => ({\n    type: GET_CAPTCHA_URL_SUCCESS,\n    payload: {captchaUrl}\n} as const)\n\n\n// THUNKS\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\n    const response = await authAPI.authMe()\n    if (response.data.resultCode === 0) {\n        let {id, email, login} = response.data.data\n        dispatch(setAuthUserDataAC(id, email, login, true))\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkAction<void, AllAppStateType, unknown, AllAppActionType> => async (dispatch) => {\n    const response = await authAPI.loginMe(email, password, rememberMe, captcha)\n    if (response.data.resultCode === 0) {\n        dispatch(getAuthUserData())\n    } else {\n        if (response.data.resultCode === 10) {\n            dispatch(getCaptchaUrl())\n        }\n        let message = response.data.messages[0]\n        dispatch(stopSubmit(\"login\", {_error: message}))\n    }\n}\n\nexport const logout = () => async (dispatch: Dispatch<SetAuthUserDataACType>) => {\n    const response = await authAPI.logoutMe()\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUserDataAC(1, \"\", \"\", false))\n    }\n}\n\nexport const getCaptchaUrl = () => async (dispatch: Dispatch) => {\n    const response = await securityAPI.getCaptchaUrl()\n        dispatch(getCaptchaUrlAC(response.data.url))\n}","import React from \"react\";\nimport {InjectedFormProps, reduxForm, Field} from \"redux-form\";\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\nimport {required} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../redux/auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {AllAppStateType} from \"../../redux/redux-store\";\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\n\n\ntype LoginFormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\ntype Iprops = {\n    captchaUrl: null | string\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType, Iprops> & Iprops> = ({handleSubmit, error, captchaUrl}) => {\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                {createField(\"email\", \"Email\", Input, [required])}\n                {createField(\"password\", \"Password\", Input, [required], \"password\")}\n                {createField(\"rememberMe\", null, Input, [], \"checkbox\", \"remember me\")}\n                { captchaUrl && <img src={captchaUrl} alt=\"\"/>}\n                { captchaUrl &&  <div>{createField(\"captcha\", \"Anti-bot symbols\", Input, [required])}</div> }\n                    {error &&  <div className={style.commonError} >{error}</div>}\n                <div>\n                    <button>Login</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormDataType, Iprops>({form: 'login'})(LoginForm)\ntype LoginType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\n    isAuth: boolean,\n    captchaUrl: null | string\n}\n\nconst Login = (props: LoginType) => {\n\n    const onSubmit = (formData: LoginFormDataType) => {\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\n    }\n\n    if (props.isAuth) {\n        return <Redirect to={\"/profile\"}/>\n    }\n\n    return (\n        <div>\n            <h1>Login</h1>\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\n        </div>\n    )\n}\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n    captchaUrl: null | string\n}\n\nconst mapStateToProps = (state: AllAppStateType): mapStateToPropsType => ({\n    isAuth: state.auth.isAuth,\n    captchaUrl: state.auth.captchaUrl\n\n})\n\nexport default connect(mapStateToProps, {login})(Login)","import {getAuthUserData} from \"./auth-reducer\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AllAppActionType, AllAppStateType} from \"./redux-store\";\n\nconst INITIALIZED_SUCCESS = \"APP/SET_USER_LOGIN_DATA\";\n\nexport const initialState = {\n  initialized: false\n}\n\nexport const AppReducer = (state: InitialStateType = initialState, action: InitializedSuccessType) => {\n    switch (action.type) {\n        case INITIALIZED_SUCCESS:\n            return {\n                ...state,\n                initialized: true\n            }\n        default:\n            return state\n    }\n}\n\n\n// ACTION\nexport const InitializedSuccessAC = ()=> ({type: INITIALIZED_SUCCESS} as const)\n\n// TYPES\nexport type InitializedSuccessType = ReturnType<typeof InitializedSuccessAC>\nexport type InitialStateType = typeof initialState\n\n// THUNK\nexport const InitializedSuccessTC = (): ThunkAction<void, AllAppStateType, unknown, AllAppActionType> =>\n    (dispatch) => {\n\n    let promis = dispatch(getAuthUserData())\n    Promise.all([promis])\n        .then( () => {\n            dispatch(InitializedSuccessAC())\n        } )\n}\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport {ProfileActionsTypes, profileReducer} from \"./profile-reducer\";\nimport {DialogsActionsTypes, dialogsReducer} from \"./dialogs-reducer\";\nimport {UserReducer} from \"./users-reducer\";\nimport {authReducer, SetAuthUserDataACType} from \"./auth-reducer\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { reducer as formReducer } from 'redux-form';\nimport {AppReducer, InitializedSuccessType} from \"./app-reducer\";\n\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: UserReducer,\n    auth: authReducer,\n    app: AppReducer,\n    form: formReducer\n})\n\nexport type AllAppStateType = ReturnType<typeof rootReducer>\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\n// let store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type AllAppActionType = ProfileActionsTypes\n    | InitializedSuccessType\n    | SetAuthUserDataACType\n    | DialogsActionsTypes\n\n\n// @ts-ignore\nwindow.store = store;\n\nexport type ReduxStoreType = typeof store\nexport type AppDispatch = typeof store.dispatch\n\n\nexport default store;\n","import React, {ComponentType, Suspense} from \"react\";\nimport {Preloader} from \"../Components/common/Preloader/Preloader\";\n\nexport function withSuspense <T>(Component: ComponentType<T>) {\n\n    return (props: any) => {\n        return <Suspense fallback={<Preloader/>}>\n            <Component {...props}/>\n        </Suspense>\n    }\n}","import {AllAppStateType} from \"./redux-store\";\n\nexport const selectIsAuth = (state: AllAppStateType) => {\n    return state.auth.isAuth\n}\n\nexport const selectCurrentUserLogin = (state: AllAppStateType) => {\n    return state.auth.login\n}\n","export default __webpack_public_path__ + \"static/media/shazam.9f4bd362.svg\";","import React from \"react\";\nimport {Link, NavLink} from \"react-router-dom\";\nimport s from \"./Header.module.css\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectCurrentUserLogin, selectIsAuth} from \"../../redux/auth-selectors\";\nimport {Avatar, Button, Col, Row} from \"antd\";\nimport Testlogo from \"../../assets/images/shazam.svg\";\nimport {UserOutlined} from \"@ant-design/icons\";\nimport {Header} from \"antd/es/layout/layout\";\nimport {logout} from \"../../redux/auth-reducer\";\n\n\n// export type HeaderPropsType = {\n//     isAuth: boolean\n//     login: string\n//     logout: () => void\n// }\n\nexport function AppHeader() {\n\n    const isAuth = useSelector(selectIsAuth)\n    const login = useSelector(selectCurrentUserLogin)\n    const dispatch = useDispatch()\n\n    const logoutCallBack = () => {\n        dispatch(logout())\n    }\ndebugger\n    return (\n        <Header className=\"header\">\n            {/*<div className=\"logo\"/>*/}\n            <Row>\n                <Col span={19}>\n                    <img src={Testlogo} alt=\"\" style={{width: \"30px\"}}/>\n                </Col>\n                    {isAuth\n                        ? <>\n                            <Col span={1}>\n                                <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\n                            </Col>\n                            <Col span={4}>\n                                <Button onClick={logoutCallBack}>Log out</Button>\n                            </Col>\n                        </>\n                        : <Col span={5}>\n                            <Button>\n                                <Link to={\"/login\"}>Login</Link>\n                            </Button>\n                        </Col>}\n            </Row>\n        </Header>\n    )\n}\n\n// export function Header(props: HeaderPropsType) {\n//\n//     const isAuth = useSelector(selectIsAuth)\n//     const login = useSelector(selectCurrentUserLogin)\n//\n//     return (\n//         <header className={s.header}>\n//             <img\n//                 src=\"https://facebookbrand.com/wp-content/uploads/2020/10/Logo_Messenger_NewBlurple-399x399-1.png?w=399&h=399\"\n//                 alt=\"logo\"/>\n//             <div className={s.login}>\n//                 {props.isAuth\n//                     ? <div> {props.login} - <button onClick={props.logout} >Log out</button>  </div>\n//                     : <NavLink to={\"/login\"}>Login</NavLink>}\n//             </div>\n//         </header>\n//     )\n// }","import React from 'react';\nimport './App.css';\nimport {Navbar} from \"./Components/Navbar/Navbar\";\nimport {HashRouter, Link, NavLink, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport {News} from \"./Components/News/News\";\nimport {Music} from \"./Components/Music/Music\";\nimport UsersContainer from \"./Components/Users/UsersContainer\";\nimport Login from \"./Components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {InitializedSuccessTC} from \"./redux/app-reducer\";\nimport {Preloader} from \"./Components/common/Preloader/Preloader\";\nimport store, {AllAppStateType} from \"./redux/redux-store\";\nimport {withSuspense} from \"./hoc/WithSuspense\";\nimport Testlogo from \"./assets/images/skype-seeklogo.svg\"\nimport {Avatar, Col, message, Row} from 'antd';\nimport \"antd/dist/antd.less\";\n\n// Ant Design\n\nimport {Layout, Menu, Breadcrumb} from 'antd';\nimport {GlobalOutlined, UserOutlined, TeamOutlined, MailOutlined, PlaySquareOutlined, HomeOutlined} from '@ant-design/icons';\nimport s from \"./Components/Navbar/Navbar.module.css\";\nimport {AppHeader} from \"./Components/Header/Header\";\n\n\nconst {SubMenu} = Menu;\nconst {Header, Content, Footer, Sider} = Layout;\n\n\nconst DialogsContainer = React.lazy(() => import('./Components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./Components/Profile/ProfileContainer'));\n\ntype AppType = {\n    InitializedSuccessTC: () => void\n    initialized: boolean\n}\n\nclass App extends React.Component<AppType> {\n\n    onClose = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        console.log(e, 'I was closed.');\n    };\n\n    componentDidMount() {\n        this.props.InitializedSuccessTC(); // thunkCreator\n\n        window.addEventListener(\"unhandledrejection\", (e) => {\n            message.error({content: e.reason.toString(), duration: 1.5})\n\n        });\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", (e) => {\n            message.error(e.reason.toString());\n        });\n    }\n\n    render() {\n\n        if (this.props.initialized) {\n            return (\n                <Layout>\n                    <AppHeader />\n                    <Content style={{padding: '0 50px'}}>\n                        <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\n                            <Sider className=\"site-layout-background\" width={200}>\n                                <Menu\n                                    mode=\"inline\"\n                                    defaultSelectedKeys={['1']}\n                                    style={{height: '100%'}}\n                                >\n                                    <Menu.Item key=\"1\" icon={<HomeOutlined />}>\n                                        <Link to={\"/profile\"} >Profile</Link>\n                                    </Menu.Item>\n                                    <Menu.Item key=\"2\" icon={<TeamOutlined />}>\n                                        <Link to={\"/users\"}  >Users</Link>\n                                    </Menu.Item>\n                                    <Menu.Item key=\"3\" icon={<MailOutlined />}>\n                                        <Link to={\"/dialogs\"} >Messages</Link>\n                                    </Menu.Item>\n                                    <Menu.Item key=\"4\" icon={<PlaySquareOutlined />}>\n                                        <Link to={\"/news\"} >Music</Link>\n                                    </Menu.Item>\n                                    <Menu.Item key=\"5\" icon={<GlobalOutlined />}>\n                                        <Link to={\"/music\"} >News</Link>\n                                    </Menu.Item>\n                                </Menu>\n                            </Sider>\n                            <Content style={{padding: '0 24px', minHeight: 280}}>\n                                <Switch>\n                                    <Route exact path={\"/\"} render={() => <Redirect to={\"/profile\"}/>}/>\n                                    <Route path={\"/login\"} render={() => <Login/>}/>\n                                    <Route path={\"/profile/:userId?\"} render={withSuspense(ProfileContainer)}/>\n                                    <Route path={\"/dialogs\"} render={withSuspense(DialogsContainer)}/>\n                                    <Route path={\"/users\"} render={() => <UsersContainer/>}/>\n                                    <Route path={\"/news\"} render={() => <News/>}/>\n                                    <Route path={\"/music\"} render={() => <Music/>}/>\n                                    <Route path={\"*\"} component={() => <div>404 NOT FOUND</div>}/>\n                                </Switch>\n                            </Content>\n                        </Layout>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>Ant Design ©2018 Created by Ant UED</Footer>\n                </Layout>\n            );\n        } else {\n            return <Preloader/>\n        }\n    }\n}\n\ntype mapStateToPropsType = {\n    initialized: boolean\n}\n\nconst mapStateToProps = (state: AllAppStateType): mapStateToPropsType => ({\n    initialized: state.app.initialized\n})\n\nconst AppContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, {InitializedSuccessTC}),\n    withRouter\n)(App);\n\nconst SocialNetworkApp = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\nexport default SocialNetworkApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport SocialNetworkApp from \"./App\";\n\n    ReactDOM.render(\n        <React.StrictMode>\n            <SocialNetworkApp/>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, {ComponentType} from \"react\";\nimport style from \"./FormsControls.module.css\"\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\n\ntype FormsControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\n\nexport const FormsControl: React.FC<FormsControlPropsType> = ({meta: {touched, error}, children}) => {\n\n    let hasError = touched && error;\n\n    return (\n        <div className={style.formsControl + \" \" + (hasError ? style.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props\n    return (\n        <FormsControl {...props} ><textarea {...input} {...restProps}/></FormsControl>\n    )\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props\n    return (\n        <FormsControl {...props} ><input {...input} {...restProps}/></FormsControl>\n    )\n}\n\nexport const createField = (name: string, placeholder: string | null, component: ComponentType<WrappedFieldProps>, validate?: Array<FieldValidatorType>, type?: string, text?: string) => {\n    return (\n        <div>\n            <Field name={name} placeholder={placeholder} component={component} validate={validate} type={type}/> {text}\n        </div>\n    )\n}","export default __webpack_public_path__ + \"static/media/preloader.7e0cb4cd.svg\";","import style from \"../../Users/Users.module.css\";\nimport React from \"react\";\nimport preloader from \"./../../../assets/images/preloader.svg\"\n\n\nexport const Preloader = () => {\n    return (\n        <div className={style.preloaderWrapper}>\n            <img src={preloader} className={style.preloader}/>\n        </div>\n\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formsControl\":\"FormsControls_formsControl__3jLxZ\",\"error\":\"FormsControls_error__1ZLMY\",\"commonError\":\"FormsControls_commonError__20ouq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Users_avatar__1xz_T\",\"selectedPage\":\"Users_selectedPage__21xQ4\",\"preloaderWrapper\":\"Users_preloaderWrapper__1tmHQ\",\"preloader\":\"Users_preloader__197xo\"};"],"sourceRoot":""}